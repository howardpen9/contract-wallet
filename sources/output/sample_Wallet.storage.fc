#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: TransferMessage
;; Header: 0xd3817806
;; TLB: transfer_message#d3817806 signature:fixed_bytes64 transfer:remainder<slice> = TransferMessage
;;

(slice, ((slice, slice))) $TransferMessage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3548477446);
    var v'signature = sc_0~load_bits(512);
    var v'transfer = sc_0;
    return (sc_0, (v'signature, v'transfer));
}

;;
;; Type: Wallet
;;

builder $Wallet$_store(builder build_0, (int, int, int) v) inline {
    var (v'publicKey, v'seqno, v'walletId) = v;
    build_0 = build_0.store_uint(v'publicKey, 256);
    build_0 = build_0.store_uint(v'seqno, 64);
    build_0 = build_0.store_uint(v'walletId, 64);
    return build_0;
}

(slice, ((int, int, int))) $Wallet$_load(slice sc_0) inline {
    var v'publicKey = sc_0~load_uint(256);
    var v'seqno = sc_0~load_uint(64);
    var v'walletId = sc_0~load_uint(64);
    return (sc_0, (v'publicKey, v'seqno, v'walletId));
}

(slice, ((int, int))) $Wallet$init$_load(slice sc_0) inline {
    var v'publicKey = sc_0~load_int(257);
    var v'walletId = sc_0~load_int(257);
    return (sc_0, (v'publicKey, v'walletId));
}

(int, int, int) $Wallet$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Wallet$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int publicKey, int walletId) = $sc~$Wallet$init$_load();
        $sc.end_parse();
        return $Wallet$_contract_init(publicKey, walletId);
    }
}

() $Wallet$_contract_store((int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Wallet$_store(b, v);
    set_data(b.end_cell());
}